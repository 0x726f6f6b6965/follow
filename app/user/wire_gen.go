// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package user

import (
	"github.com/0x726f6f6b6965/follow/internal/config"
	"github.com/0x726f6f6b6965/follow/internal/services"
	"github.com/0x726f6f6b6965/follow/internal/storage"
	"github.com/0x726f6f6b6965/follow/internal/storage/cache"
	"github.com/0x726f6f6b6965/follow/internal/storage/user"
	"github.com/0x726f6f6b6965/follow/pkg/logger"
	"github.com/0x726f6f6b6965/follow/protos/user/v1"
	"github.com/tylertreat/BoomFilters"
)

// Injectors from wire.go:

func InitUserService(cfg *config.AppConfig, filter *boom.CountingBloomFilter) (v1.UserServiceServer, func(), error) {
	configDBConfig := dbConfig(cfg)
	db, cleanup, err := storage.NewPostgres(configDBConfig)
	if err != nil {
		return nil, nil, err
	}
	sotrageUsers := user.New(db)
	configRedisConfig := redisConfig(cfg)
	client, cleanup2, err := storage.NewRedis(configRedisConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	cacheCache := cache.New(client)
	duration := getTTL(cfg)
	loggerLogConfig := logConfig(cfg)
	zapLogger, cleanup3, err := logger.NewLogger(loggerLogConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	userServiceServer := services.NewUserService(sotrageUsers, cacheCache, duration, filter, zapLogger)
	return userServiceServer, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
